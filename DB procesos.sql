CONNECT SYS AS SYSDBA
-- 090322

CREATE TABLESPACE UNAM DATAFILE 'D:/Projects/BDavanzada/UNAM.DBF' SIZE 5M;

CREATE USER BLUE IDENTIFIED BY 090322 DEFAULT TABLESPACE UNAM;

GRANT CONNECT, CREATE SESSION, CREATE TABLE, CREATE PROCEDURE, UNLIMITED TABLESPACE TO BLUE;

CONNECT BLUE
-- 090322

SELECT * FROM CAT;

CREATE TABLE AREA (
    ID_MATERIA VARCHAR(3) PRIMARY KEY,
    DESCRIPCION_MATERIA VARCHAR(30)
);

CREATE TABLE CURSO (
    NUM_CURSO VARCHAR(10) PRIMARY KEY,
    NOMBRE_CURSO VARCHAR(30),
    CREDITOS VARCHAR(2)
);

CREATE TABLE ESTUDIANTE (
    ID_ESTUDIANTE VARCHAR(4) PRIMARY KEY,
    APELLIDO VARCHAR(15),
    NOMBRE VARCHAR(15),
    INICIAL CHAR(1),
    ID_MATERIA VARCHAR(3),
    CONSTRAINT A_AREA
    FOREIGN KEY (ID_MATERIA) REFERENCES AREA(ID_MATERIA)
);

CREATE TABLE INSCRIPCION (
    ID_ESTUDIANTE VARCHAR(4),
    NUM_CURSO VARCHAR(10),
    FECHA_FIN DATE,
    PRIMARY KEY (ID_ESTUDIANTE, NUM_CURSO),
    CONSTRAINT A_CURSO
    FOREIGN KEY (NUM_CURSO) REFERENCES CURSO(NUM_CURSO),
    CONSTRAINT A_ESTUDIANTE
    FOREIGN KEY (ID_ESTUDIANTE) REFERENCES ESTUDIANTE(ID_ESTUDIANTE)
);

insert all
    INTO AREA VALUES ('MAT', 'Matematicas')
    INTO AREA VALUES ('FIl', 'Filosofia')
    INTO AREA VALUES ('ING', 'Literatura inglesa')
    INTO AREA VALUES ('MUS', 'Musica')
    INTO AREA VALUES ('CC', 'Ciencias de la computacion')
    INTO CURSO VALUES ('MAT0011', 'Matematicas discretas', '12')
    INTO CURSO VALUES ('MAT0027', 'Calculo I', '12')
    INTO CURSO VALUES ('ING0010', 'Ingles Clasico', '8')
    INTO CURSO VALUES ('FIL0010', 'Introduccion a la filosofia', '8')
    INTO CURSO VALUES ('CC00010', 'Lenguajes de programacion', '10')
    INTO CURSO VALUES ('SOC0102', 'Ascenso del hombre', '8')
    INTO CURSO VALUES ('MUS0002', 'Origen del Jazz', '8')
    INTO CURSO VALUES ('ING0101', 'Shakespeare II', '8')
    INTO ESTUDIANTE VALUES ('2907', 'Lopez', 'Jacobo', 'R', 'MAT')
    INTO ESTUDIANTE VALUES ('4019', 'Perez', 'Jenny', 'L', 'FIl')
    INTO ESTUDIANTE VALUES ('5145', 'Santana', 'Luis', 'M', 'ING')
    INTO ESTUDIANTE VALUES ('6132', 'Morrison', 'Javier', 'Q', 'MUS')
    INTO ESTUDIANTE VALUES ('7810', 'Martinez', 'Ricardo', 'E', 'CC')
    INTO ESTUDIANTE VALUES ('8966', 'Juarez', 'Samantha', 'L', 'ING')
    INTO INSCRIPCION VALUES ('2907', 'MAT0011', '01/08/15')
    INTO INSCRIPCION VALUES ('2907', 'MAT0027', '30/04/15')
    INTO INSCRIPCION VALUES ('2907', 'ING0010', '30/12/15')
    INTO INSCRIPCION VALUES ('4019', 'FIL0010', '30/04/15')
    INTO INSCRIPCION VALUES ('4019', 'CC00010', '30/04/15')
    INTO INSCRIPCION VALUES ('5145', 'SOC0102', '01/08/15')
    INTO INSCRIPCION VALUES ('6132', 'MUS0002', '30/04/15')
    INTO INSCRIPCION VALUES ('6132', 'SOC0102', '01/08/15')
    INTO INSCRIPCION VALUES ('8966', 'ING0010', '30/04/15')
    INTO INSCRIPCION VALUES ('8966', 'ING0101', '01/08/15')
    SELECT * FROM dual;

SELECT * FROM AREA;
SELECT * FROM CURSO;
SELECT * FROM ESTUDIANTE;
SELECT * FROM INSCRIPCION;

CREATE OR REPLACE PROCEDURE CONSULTA (
    V_CODIGO IN ESTUDIANTE.ID_ESTUDIANTE%TYPE,
    V_APELLIDO OUT ESTUDIANTE.APELLIDO%TYPE,
    V_NOMBRE OUT ESTUDIANTE.NOMBRE%TYPE,
    V_AREA_MATERIA OUT AREA.ID_MATERIA%TYPE
)
IS
BEGIN
    SELECT APELLIDO, NOMBRE, ID_MATERIA
    INTO V_APELLIDO, V_NOMBRE, V_AREA_MATERIA
    FROM ESTUDIANTE
    WHERE ID_ESTUDIANTE = V_CODIGO;
END CONSULTA;
/

VARIABLE G_APELLIDO VARCHAR2(15);
VARIABLE G_NOMBRE VARCHAR2(15);
VARIABLE G_AREA_MATERIA VARCHAR2(3);

EXECUTE CONSULTA ('2907', :G_APELLIDO, :G_NOMBRE, :G_AREA_MATERIA);

PRINT G_APELLIDO;
PRINT G_NOMBRE;
PRINT G_AREA_MATERIA;



CREATE OR REPLACE PROCEDURE formato_tel (
    v_Telefono IN OUT VARCHAR2
)
    IS
    BEGIN
        v_Telefono := '(' || SUBSTR(v_Telefono, 1, 3) || ') ' || SUBSTR(v_Telefono, 4, 3) || '-' || SUBSTR(v_Telefono, 7, 4);
    END formato_tel;
/

VARIABLE g_telefono VARCHAR2(15);

BEGIN
    :g_telefono := '8006330575';
END;
/

EXECUTE formato_tel(:g_telefono);

PRINT g_telefono;



SELECT
    ESTUDIANTE.NOMBRE,
    ESTUDIANTE.APELLIDO,
    AREA.DESCRIPCION_MATERIA,
    CURSO.NOMBRE_CURSO,
    INSCRIPCION.FECHA_FIN
FROM ESTUDIANTE
JOIN AREA ON ESTUDIANTE.ID_MATERIA = AREA.ID_MATERIA
JOIN INSCRIPCION  ON ESTUDIANTE.ID_ESTUDIANTE = INSCRIPCION.ID_ESTUDIANTE
JOIN CURSO ON INSCRIPCION.NUM_CURSO = CURSO.NUM_CURSO;



CREATE OR REPLACE PROCEDURE lectura IS
    CURSOR TABLA_VIRTUAL IS
        SELECT * FROM ESTUDIANTE;
        ARREGLO TABLA_VIRTUAL%ROWTYPE;
BEGIN
    OPEN TABLA_VIRTUAL;
    FETCH TABLA_VIRTUAL INTO ARREGLO;
    WHILE TABLA_VIRTUAL%FOUND LOOP
        DBMS_OUTPUT.PUT_LINE('Apellido: ' || ARREGLO.APELLIDO || ' Nombre: ' || ARREGLO.NOMBRE);
        FETCH TABLA_VIRTUAL INTO ARREGLO;
    END LOOP;
    CLOSE TABLA_VIRTUAL;
END;
/


set serveroutput on;

EXECUTE lectura;


CREATE OR REPLACE PROCEDURE CURSOR_FLOOP IS
    CURSOR CR_LOOP IS
        SELECT * FROM CURSO;
        V_RECEPTORA CR_LOOP%ROWTYPE;
BEGIN
    FOR V_RECEPTORA IN CR_LOOP LOOP
        DBMS_OUTPUT.PUT_LINE(CR_LOOP%ROWCOUNT || ' ' || V_RECEPTORA.NOMBRE_CURSO);
    END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE PARAMETROS(v_ap IN Varchar)
AS
    CURSOR CR_parametro (v_Apellido IN Varchar2)
    IS
        SELECT * FROM ESTUDIANTE WHERE APELLIDO = v_Apellido;
        V_RECEPTORA CR_parametro%ROWTYPE;
BEGIN
    FOR V_RECEPTORA IN CR_parametro(v_ap) LOOP
        DBMS_OUTPUT.PUT_LINE(V_RECEPTORA.NOMBRE);
    END LOOP;
END;
/

EXEC PARAMETROS('Lopez');

-- Desarrollar un procedimiento que muestra los cursos en que esté inscrito un alumno cuyo id, sea recibido como parámetro.
-- El procedimiento deberá mostrar:
-- El alumno Nombre apellido está inscrito en los cursos siguientes:
-- Numero de curso 1 Nombre curso 1 Créditos 1
-- Numero de curso 2 Nombre curso 2 Créditos 2
-- Numero de curso N Nombre curso N Créditos N
CREATE OR REPLACE PROCEDURE INSCRITO(V_ID IN VARCHAR2) AS
    CURSOR CR_INSCRITO (V_ID_ESTUDIANTE IN VARCHAR2) IS
        SELECT CURSO.NUM_CURSO, CURSO.NOMBRE_CURSO, CURSO.CREDITOS
        FROM CURSO
        JOIN INSCRIPCION ON CURSO.NUM_CURSO = INSCRIPCION.NUM_CURSO
        WHERE INSCRIPCION.ID_ESTUDIANTE = V_ID_ESTUDIANTE;
    V_RECEPTORA CR_INSCRITO%ROWTYPE;
    V_NOMBRE ESTUDIANTE.NOMBRE%TYPE;
    V_APELLIDO ESTUDIANTE.APELLIDO%TYPE;
BEGIN
    SELECT NOMBRE, APELLIDO INTO V_NOMBRE, V_APELLIDO
    FROM ESTUDIANTE
    WHERE ID_ESTUDIANTE = V_ID;
    DBMS_OUTPUT.PUT_LINE('El alumno ' || V_NOMBRE || ' ' || V_APELLIDO || ' esta inscrito en los cursos siguientes:');
    DBMS_OUTPUT.PUT_LINE('----------------------------------------');
    FOR V_RECEPTORA IN CR_INSCRITO(V_ID) LOOP
        DBMS_OUTPUT.PUT_LINE('Numero de curso: ' || V_RECEPTORA.NUM_CURSO || ' Nombre curso: ' || V_RECEPTORA.NOMBRE_CURSO || ' Creditos: ' || V_RECEPTORA.CREDITOS);
    END LOOP;
END;
/

EXEC INSCRITO('2907');



CREATE OR REPLACE TRIGGER INSERCION
    AFTER INSERT ON CLIENTES
    FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Se ha insertado un nuevo cliente');
END;
/

INSERT INTO CLIENTES VALUES ('C1', 'Juan Perez', 1000);
INSERT INTO CLIENTES VALUES ('C2', 'Maria Lopez', 2000);



CREATE OR REPLACE TRIGGER AUDITAR_CLIENTES
AFTER UPDATE ON CLIENTES
FOR EACH ROW
BEGIN
    INSERT INTO AUDITOR VALUES ('ANTERIOR: ' || :OLD.LIMITE || ' NUEVO: ' || :NEW.LIMITE);
END;
/

CREATE TABLE AUDITOR (
    CAMBIO VARCHAR(50)
);

UPDATE CLIENTES SET LIMITE = 1500 WHERE CODIGO = 'C1';
UPDATE CLIENTES SET LIMITE = 2500 WHERE CODIGO = 'C2';

SELECT * FROM AUDITOR;



-- CREATE OR REPLACE VIEW Clientes_Estados AS
--     SELECT CODIGO, NOMBRE, LIMITE, ESTADO, NOMBRE_ESTADO
--     FROM CLIENTES, ESTADOS
--     WHERE CLIENTES.ESTADO = ESTADOS.CODIGO_ESTADO;
-- /

CREATE TABLE CLIENTES (
    CODIGO VARCHAR(2) PRIMARY KEY,
    NOMBRE VARCHAR(15),
    LIMITE NUMBER(8,2),
    ESTADO VARCHAR(2)
);

CREATE TABLE ESTADOS (
    CODIGO_ESTADO VARCHAR(2) PRIMARY KEY,
    NOMBRE_ESTADO VARCHAR(15)
);


DROP TABLE CLIENTES;
DROP TABLE ESTADOS;
PURGE RECYCLEBIN;


INSERT INTO ESTADOS VALUES ('01','Queretaro');
INSERT INTO ESTADOS VALUES ('02','San Luis Potosi');
INSERT INTO ESTADOS VALUES ('03','Coahuila');
INSERT INTO ESTADOS VALUES ('04','Durango');
INSERT INTO ESTADOS VALUES ('05','Guanajuato');
INSERT INTO ESTADOS VALUES ('06','Tamaulipas');
INSERT INTO CLIENTES VALUES ('14', 'Juan Perez', 1000, '01');
INSERT INTO CLIENTES VALUES ('15', 'Maria Lopez', 2000, '02');
INSERT INTO CLIENTES VALUES ('16', 'Pedro Martinez', 3000, '03');

SELECT * FROM Clientes_Estados;
SELECT * FROM AUDITOR;


CREATE OR REPLACE TRIGGER SUSTITUCION
INSTEAD OF DELETE OR INSERT
ON Clientes_Estados
FOR EACH ROW
BEGIN
    IF DELETING THEN
        INSERT INTO AUDITOR VALUES ('Borrado ' || :OLD.LIMITE);
    END IF;
    IF INSERTING THEN
        INSERT INTO AUDITOR VALUES ('Insertado ' || :NEW.LIMITE);
    END IF;
END;
/

DELETE FROM Clientes_Estados WHERE CODIGO = '14';

INSERT INTO Clientes_Estados VALUES ('17', 'Ana Garcia', 4000, '02', 'San Luis Potosi');


GRANT ADMINISTER DATABASE TRIGGER TO BLUE;

CREATE TABLE CONEXIONES (
    USUARIO VARCHAR2(50),
    MOMENTO DATE,
    EVENTO VARCHAR2(50)
);

CREATE OR REPLACE TRIGGER EJEMPLO
AFTER LOGON ON DATABASE
BEGIN
    INSERT INTO CONEXIONES VALUES (ORA_LOGIN_USER, SYSTIMESTAMP, ORA_SYSEVENT);
END;
/



CREATE OR REPLACE PROCEDURE EJEMPLO IS
V_APELLIDO ESTUDIANTE.APELLIDO%TYPE;
BEGIN
    SELECT APELLIDO INTO v_Apellido
    FROM ESTUDIANTE
    WHERE APELLIDO = 'Samantha';
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se arrojaron datos: NO_DATA_FOUND');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Demasiados registros');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error no previsto');
END;
/

EXEC EJEMPLO;

SELECT TEXT FROM ALL_SOURCE WHERE NAME = 'EJEMPLO';


DECLARE 
    EXCEPCION_DE_EDAD EXCEPTION;
    EDAD NUMBER;
BEGIN
    EDAD:=179;
    RAISE EXCEPCION_DE_EDAD;
EXCEPTION 
    WHEN EXCEPCION_DE_EDAD THEN 
        DBMS_OUTPUT.PUT_LINE('!No es posible!');
END;
/

-- usando parametros inserte los datos de tres nuevos estudiantes en la tabla estudiantes
-- si el estudiante ya existe crear (previamente) una tabla llamada ERR con las columnas: numero y descripcion, e insertar una breve descripcion del error 
-- si algun dato es de mayor longitud, introducir una breve descripcion en ERR
-- cualquier otro error no considerado, insertar una breve descripcion en ERR

CREATE TABLE ERR (
    NUMERO NUMBER,
    DESCRIPCION VARCHAR(50)
);

CREATE OR REPLACE PROCEDURE INSERTAR_ESTUDIANTE(
    P_ID_ESTUDIANTE IN VARCHAR2, 
    P_APELLIDO IN VARCHAR2, 
    P_NOMBRE IN VARCHAR2, 
    P_INICIAL IN CHAR, 
    P_ID_MATERIA IN VARCHAR2
)
IS
    DUPLICATE_ENTRY EXCEPTION;
    PRAGMA EXCEPTION_INIT(DUPLICATE_ENTRY, -00001);
BEGIN
    BEGIN
        INSERT INTO ESTUDIANTE (ID_ESTUDIANTE, APELLIDO, NOMBRE, INICIAL, ID_MATERIA)
        VALUES (P_ID_ESTUDIANTE, P_APELLIDO, P_NOMBRE, P_INICIAL, P_ID_MATERIA);
    EXCEPTION
        WHEN DUPLICATE_ENTRY THEN
            INSERT INTO ERR (NUMERO, DESCRIPCION) VALUES (1, 'Estudiante ya existe: ' || P_ID_ESTUDIANTE);
        WHEN VALUE_ERROR THEN
            INSERT INTO ERR (NUMERO, DESCRIPCION) VALUES (1, 'Dato demasiado largo para: ' || P_ID_ESTUDIANTE);
        WHEN OTHERS THEN
            INSERT INTO ERR (NUMERO, DESCRIPCION) VALUES (1, 'Error desconocido para: ' || P_ID_ESTUDIANTE);
    END;
END;
/ 

EXEC INSERTAR_ESTUDIANTE('2907', 'Lopez', 'Jacobo', 'R', 'MAT');
EXEC INSERTAR_ESTUDIANTE('4019', 'Perez', 'Jenny', 'L', 'FIl');
EXEC INSERTAR_ESTUDIANTE('5145', 'Santana', 'Luis', 'M', 'ING');

SELECT * FROM ESTUDIANTE;
SELECT * FROM ERR;

DELETE FROM ERR;